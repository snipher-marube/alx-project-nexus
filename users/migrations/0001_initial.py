# Generated by Django 5.2.4 on 2025-07-22 08:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import users.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(blank=True, help_text='Will be generated automatically if not provided', max_length=150, null=True, unique=True, verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'This email is already registered.'}, max_length=254, unique=True, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(error_messages={'unique': 'This phone number is already registered.'}, max_length=128, region=None, unique=True, verbose_name='phone number')),
                ('user_type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('VENDOR', 'Vendor'), ('ADMIN', 'Administrator'), ('STAFF', 'Staff')], default='CUSTOMER', max_length=10, verbose_name='user type')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified their email.', verbose_name='verified status')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('password_changed_at', models.DateTimeField(blank=True, null=True, verbose_name='password changed at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1, null=True, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('profile_picture', models.ImageField(blank=True, help_text='Maximum file size: 2MB. JPG, JPEG, or PNG only.', null=True, upload_to='profile_pictures/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='profile picture')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('address', models.TextField(blank=True, max_length=255, verbose_name='address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='state/province')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='country')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('social_media', models.JSONField(blank=True, default=dict, null=True, verbose_name='social media links')),
                ('preferences', models.JSONField(blank=True, default=dict, null=True, verbose_name='user preferences')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
                'indexes': [models.Index(fields=['user'], name='users_profi_user_id_783607_idx'), models.Index(fields=['country', 'city'], name='users_profi_country_e32bd9_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='users_user_phone_9474e8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_user_ty_4573bb_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='users_user_is_acti_ddda02_idx'),
        ),
    ]
